---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
install.packages("ggplot2")
install.packages("dplyr")
```

```{r}
library(ggplot2)
library(dplyr, warn.conflicts = FALSE)
```

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude'

```{r}

airbnb <- airbnb [, c('City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude')]

print(airbnb)
```

Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio ''

```{r}
df_madrid <- airbnb %>% filter(City == "Madrid" & Room.Type=="Entire home/apt" &  Neighbourhood != "")

print(df_madrid)
```

Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

```{r}
df_madrid <- df_madrid [, c('Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude')]

print(df_madrid)
```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

```{r}
df_madrid <- mutate(df_madrid, Square.Meters =  0.092903 * Square.Feet ) 

print(df_madrid)
```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

```{r}
num_na <- sum(is.na(df_madrid$Square.Meters))
num_row <- nrow(df_madrid)
porc_NA_SQM <- round(num_na / num_row * 100,2)
cat("Numero total de NA en la columna metros cuadrados: ",num_na, "\n")
cat("Numero total de filas en el dataset df_madrid: ",num_row, "\n")
cat("Porcentaje de los apartamentos no muestran los metros cuadrados: ",porc_NA_SQM, "%")
```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}
n_zeros <- nrow(df_madrid[!is.na(df_madrid$Square.Meters) & df_madrid$Square.Meters == 0,])

nrow_no_na <- nrow(df_madrid[!is.na(df_madrid$Square.Meters),]) 

porc_apt_SqrZero <- round(n_zeros / nrow_no_na * 100,2)


cat("El numero total de apartamentos con cero metros cuadrados es: ",n_zeros,"\n")
cat("El numero total de apartamentos excluyendo los de NA metros cuadrados es: ",nrow_no_na,"\n")
cat("El porcentaje de apartamentos con cero metros cuadrados es: ",porc_apt_SqrZero,"%")

```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

```{r}
df_madrid <- mutate(df_madrid, Square.Meters = ifelse(Square.Meters == 0,  NA, Square.Meters))
num_na_mod <- sum(is.na(df_madrid$Square.Meters))


print(df_madrid)
cat("Numero total de NA en la columna metros cuadrados modificada: ",num_na_mod, "\n")
```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer:

\* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más.

\* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
ggplot(data = df_madrid, aes(x = df_madrid$Square.Meters)) + geom_histogram(bins=20, fill='blue', color='gray')+theme_bw() + labs(x = "Metros Cuadrados", y = "Num Apartamentos") + ggtitle("Histograma de Apartamntos por Metros Cuadrados en Madrid")

summary(df_madrid)

```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}
df_madrid <- mutate(df_madrid, Square.Meters = ifelse(Square.Meters <= 20,  NA, Square.Meters))


ggplot(data = df_madrid, aes(x = df_madrid$Square.Meters)) + geom_histogram(bins=20, fill='blue', color='gray')+theme_bw() + labs(x = "Metros Cuadrados", y = "Num Apartamentos") + ggtitle("Histograma de Apartamntos por Metros Cuadrados en Madrid")

summary(df_madrid)
print(df_madrid)

```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

```{r}
library(dplyr)


mod_df_madrid <- df_madrid %>% group_by(Neighbourhood) %>% summarise(sum(!is.na(Square.Meters)))

barrios <- mod_df_madrid[mod_df_madrid[2] > 0, ][1] %>% pull()
barrios <- barrios[barrios != ""]


cat("Son", length(unique(df_madrid$Neighbourhood)), "barrios con todas sus entradas de Square.Meters diferentes de NA.\nLos barrios son:\n", paste(barrios, collapse = ", "), "\n")

df_madrid <- df_madrid[df_madrid$Neighbourhood %in% barrios, ]

```

El barrio parece ser un indicador importante para los metros cuadrados de un apartamento.

Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey tal y como hicimos en el curso de estadística:

```{r}
tky<-TukeyHSD(aov( formula=Square.Meters~Neighbourhood, data=df_madrid ))
tky.result<-data.frame(tky$Neighbourhood)
cn <-sort(unique(df_madrid$Neighbourhood))
resm <- matrix(NA, length(cn),length(cn))
rownames(resm) <- cn
colnames(resm) <- cn
resm[lower.tri(resm) ] <- round(tky.result$p.adj,4)
resm[upper.tri(resm) ] <- t(resm)[upper.tri(resm)] 
diag(resm) <- 1
library(ggplot2)
library(reshape2)
dfResm <- melt(resm)
ggplot(dfResm, aes(x=Var1, y=Var2, fill=value))+
  geom_tile(colour = "black")+
  scale_fill_gradient(low = "white",high = "steelblue")+
  ylab("Class")+xlab("Class")+theme_bw()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1),legend.position="none")
```

9.  Usando como variable de distancia: 1-resm Dibuja un dendrograma de los diferentes barrios.

    ```{r}
    library(dendextend)

    tky.dist <- as.dist(1 - resm)
    tky.tree <- hclust(tky.dist, method = "complete")
    tky.dend <- as.dendrogram(tky.tree)
    par(cex = 0.4)
    tky.dend_colored <- color_branches(tky.dend, k = 4)
    plot(tky.dend_colored, main = "Dendograma de los barrios")

    ```

```{r}
cat("Como se puede ver ya no existen metros cuadrados inferiores a 20: \n")
summary(df_madrid[,c(1,13)])
```

------------------------------------------------------------------------

10. ¿Que punto de corte sería el aconsejable?

```{r}
tky.dist <- as.dist(1 - resm)
tky.tree <- hclust(tky.dist, method = "complete")
par(cex = 0.4)
tky.dend_colored <- color_branches(tky.dend, k = 4)
plot(tky.dend_colored, main = "Dendograma de los barrios")
tky.treecluster <- rect.hclust(tky.tree, h = 0.4)

```

Se sugiere establecer los cortes en 0.4, lo que resultará en la formación de 3 clusters distintos.

```{r}
tky.dend <- as.dendrogram(tky.tree)
tky.dend
```

¿cuantos clusters aparecen?

```{r}
clusters <- cutree(tky.tree, h = 0.4)
cat("Número de clusters:", length(unique(clusters)), "\n")
table(clusters)

```

------------------------------------------------------------------------

11. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

```{r}

df_madrid["neighd_id"] <- 0
for (index in 1:3){
  df_madrid[df_madrid$Neighbourhood %in% names(clusters[clusters == index]), "neighd_id"] <- index
}

print(df_madrid)

```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

    ```{r}
    set.seed(12345)
    indices_train <- sample(1:nrow(df_madrid), 0.7 * nrow(df_madrid))  

    df_madrid_train <- df_madrid[indices_train, ]
    df_madrid_test <- df_madrid[-indices_train, ]

    print(df_madrid)
    print(df_madrid_train)
    print(df_madrid_test)
    ```

```{r}
paste("Número de muestras de train:", nrow(df_madrid_train)," equivalente al  70%")
paste("Número de muestras de test:", nrow(df_madrid_test)," equivalente al 30%")
```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

    ```{r}

    cat("Modelo Inicial: \n")

    # Modelo inicial
    model <- lm(Square.Meters ~  Accommodates + Bathrooms + Bedrooms + Beds + Price + Guests.Included + Extra.People + Review.Scores.Rating + Latitude + Longitude + neighd_id, data = df_madrid_train)
    summary(model)

    cat("------------------------------------------------------------------- \n")
    cat("Modelo Ajustado: \n")

    #Después de validar varias combinaciones, el modelo que presenta un coeficiente de determinación (R2) más cercano a uno es el siguiente: 
    model1 <- lm(Square.Meters ~ Accommodates + Bathrooms + Bedrooms + Price + neighd_id, data = df_madrid_train)
    summary(model1)
    ```

------------------------------------------------------------------------

14. Mirad el histograma de los residuos sobre el conjunto de test para evaluar la calidad de vuestro modelo

    ```{r}

    residuos <- residuals(model1)
    predicciones <- predict(model1)


    # Histograma de los residuos en el conjunto de test
    hist(residuos, main = "Histograma de Residuos Test", col = "blue", xlab = "Residuos")

    # Gráfico de dispersión de residuos vs. predicciones en el conjunto de test
    plot(predicciones, residuos, main = "Residuos vs. Predicciones Test", xlab = "Predicciones", ylab = "Residuos")



    # Prueba de normalidad de los residuos (puedes elegir una prueba específica según tus necesidades)
    shapiro.test(residuos)
    cat("El valor de W se aproxima a 1, lo cual sugiere que los datos no presentan desviaciones significativas respecto a la normalidad.Adicionalmente apartir del p-value se puede concluir que el modelo no cumple completamente con la asunción de normalidad de los residuos. .")


    # Q-Q plot para evaluar la normalidad de los residuos
    qqnorm(residuos, main = "Q-Q Plot de Residuos")
    qqline(residuos)

    # Cooks para evaluar la distribucion de los residuos
    plot(cooks.distance(model1))
    cat("Como se evidencia en la gráfica de Cook's, se observan puntos atípicos que ejercen una influencia significativamente elevada. Estas mismas tendencias también son perceptibles en el gráfico Q-Q line.")
    ```

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

```{r}
df_nuevo_apartamento <- data.frame(
    "Accommodates" = 6,
    "Bathrooms" = 1,
    "Price" = 80,
    "Bedrooms" = 3,
    "Neighbourhood" = "Sol",
    "Beds" = 3,
    "Review.Scores.Rating" = 80,
    "neighd_id" = as.numeric(as.factor(3)))

predict_meters_apto <- predict(model1, df_nuevo_apartamento, na.action = na.pass)
paste("Los metros cuadrados que se predicen que tendría el apartamento son:", round(predict_meters_apto, 2))
paste("Por cada habitación adicional se predice que los metros cuadrados aumentan:",round(model1$coefficients["Bedrooms"],2))
```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}
df_madrid_estimado <- df_madrid
df_madrid_estimado$Square.Meters <- predict(model1,df_madrid_estimado)
print(df_madrid_estimado)
summary(df_madrid_estimado)
```

------------------------------------------------------------------------

17. Usar PCA para encontrar el apartamento más cercano a uno dado. Este algoritmo nos ayudaría a dado un apartamento que el algoritmo nos devolvería los 5 apartamentos más similares.

Crearemos una función tal que le pasemos un apartamento con los siguientes datos: \* Accommodates \* Bathrooms \* Bedrooms \* Beds \* Price \* Guests.Included \* Extra.People \* Review.Scores.Rating \* Latitude \* Longitude \* Square.Meters

y nos devuelva los 5 más similares de:

```{r}
#Partiendo del dataframe modificado se procede a omitir los NAs
df_madrid_estimado_outna <- na.omit(df_madrid_estimado)
print(df_madrid_estimado_outna)
summary(df_madrid_estimado_outna)
```

```{r}
# Convertirlos los barrios en factores numéricos.
df_madrid_estimado_outna$Neighbourhood <- as.numeric(factor(df_madrid_estimado_outna$Neighbourhood, levels = unique(df_madrid_estimado_outna$Neighbourhood)))

print(df_madrid_estimado_outna)

```

```{r}
# Calculo PCA
PCA <- prcomp(df_madrid_estimado_outna, center = TRUE, scale = TRUE)
# Resumen de los resultados
summary(PCA)
# Gráfico de la proporción de varianza explicada
plot(PCA)
```

```{r}
#Elemento a analizar del dataset
df_set_apartamento <- subset(df_madrid_estimado_outna, Neighbourhood == 1 & Accommodates == 6 & Review.Scores.Rating == 90 & Price == 150)

print(df_set_apartamento)
```

```{r}
df_set_apartamento_PCA <- predict(PCA, newdata = df_set_apartamento)

# Calcular la distancia euclidiana sin normalizar
mas_cercanos <- dist(rbind(df_set_apartamento_PCA, predict(PCA, newdata = df_madrid_estimado_outna)))

# Asignar la distancia a la columna 'mas_cercano'
df_madrid_estimado_outna$mas_cercano <- mas_cercanos[1:nrow(df_madrid_estimado_outna)]

# Mostrar el DataFrame actualizado
print(df_madrid_estimado_outna)
```

```{r}
df_madrid_estimado_outna <- df_madrid_estimado_outna[order(df_madrid_estimado_outna$mas_cercano),]
print(df_madrid_estimado_outna)
```

```{r}
top_5_mas_cerca <- df_madrid_estimado_outna[1:5,]
print(top_5_mas_cerca)
```

```{r}


# Extraer las distancias de los 5 más cercanos
distancias_5_mas_cercanos <- as.vector(mas_cercanos[indices_5_mas_cercanos])

# Gráfico de barras para visualizar las distancias
barplot(distancias_5_mas_cercanos, names.arg = indices_5_mas_cercanos, 
        col = "blue", main = "Distancias a los 5 más cercanos", 
        xlab = "Índices", ylab = "Distancia")


# Gráfico de dispersión para visualizar las distancias
plot(indices_5_mas_cercanos, distancias_5_mas_cercanos, 
     col = "blue", pch = 16, main = "Distancias a los 5 más cercanos", 
     xlab = "Índices", ylab = "Distancia")

```

------------------------------------------------------------------------
